apply plugin: 'com.android.library'

android {
    compileSdkVersion android_compileSdkVersion.toInteger()
    buildToolsVersion android_buildToolsVersion

    defaultConfig {
        minSdkVersion android_minSdkVersion.toInteger()
        targetSdkVersion android_compileSdkVersion.toInteger()

        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/opencv/java']
            jniLibs.srcDirs = ['./build/libs', './src/opencv/native/libs']
            aidl.srcDirs = ['src/opencv/aidl']
        }
    }
}

afterEvaluate {
    task ndkBuild(type: Exec) {
        String ndkDir = project.android.ndkDirectory
        StringBuilder ndkShell = new StringBuilder("${ndkDir}/ndk-build")
        if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(
                org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {
            ndkShell.append(".cmd")
        }
        commandLine ndkShell.toString(),
                "NDK_PROJECT_PATH=build",
                "APP_BUILD_SCRIPT=src/main/jni/Android.mk",
                "NDK_APPLICATION_MK=src/main/jni/Application.mk",
                "NDK_DEBUG=0"
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    tasks.compileDebugNdk.onlyIf { false }
    tasks.compileReleaseNdk.onlyIf { false }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}
